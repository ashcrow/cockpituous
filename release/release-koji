#!/bin/sh -euf
#
# release-koji
#
# A script that does a Koji dist-git commit and build based on a git
# repository. The git repository must have a spec file ready for use.
# The $changelog will be added to the spec file.
#
# $ git tag -as 0.55
# $ make distcheck
# $ release-koji -p package -s package.spec -f package-0.55.tbz f22
#
# The spec file will be updated and committed, along with the new source
# tarball. An SRPM and scratch build will be done to test things, after
# which the commit will be pushed to dist-git and the real build happens.
#
# If the tarball is a symlink it will be resolved to its actual file name.
#
# Arguments are described here. Most arguments have an equivalent envvar.
#
# -f tgz     RELEASE_TARBALL=tbz    The tarball to upload
#                                   default: no file attachment
# -k         RELEASE_CONTINUE=1     Ignore build failure and skip the
#                                   branch without failing delivery.
# -p package RELEASE_PACKAGE=name   The distgit name of the package
# -t 0.X     RELEASE_TAG=0.X        The tag to create release from
#                                   default: latest tag
# -s spec    RELEASE_SPEC=spec      Path to spec file in source git repo.
#                                   default: origin
# -q         RELEASE_QUIET=1        Make output more quiet
# -x         RELEASE_TRANSACTION=1  SIGSTOP before pushing the dist-git commit
# -v         RELEASE_VERBOSE=1      Make output more verbose
# -z         RELEASE_CHECK=1        Check credentials and configuration
#
# Specify a distgit branch to build as a command line argument.
#

set -euf

# Various arguments
TAG=${RELEASE_TAG:-}
PACKAGE=${RELEASE_PACKAGE:-}
TRANSACTION=${RELEASE_TRANSACTION:-0}
QUIET=${RELEASE_QUIET:-0}
VERBOSE=${RELEASE_VERBOSE:-0}
TARBALL=${RELEASE_TARBALL:-}
CONTINUE=${RELEASE_CONTINUE:-0}
SPEC=${RELEASE_SPEC:-$PACKAGE.spec}
SRPM=${RELEASE_SRPM:-$PWD/srpm}
CHECK=${RELEASE_CHECK:-0}

# Other globals
CLEANUP=""
SOURCES=""
WORKDIR=""
BRANCH=""

usage()
{
    echo "usage: release-koji [-kqvxz] [-t TAG] [-s SPEC] [-f TARBALL] [-p PACKAGE] BRANCH" >&2
    exit ${1-2}
}

trace()
{
    if [ $QUIET -eq 0 ]; then
        echo "> $@" >&2
    fi
}

message()
{
    echo "release-koji: $@" >&2
}

dash_bullets()
{
        sed -e 's/^\* /- /' \
            -e 's/^ \* /- /' \
            -e 's/^[^ *-]/- /'
}

trim_contents()
{
    # Remove line with just tag name. Remove signature
    sed -e '/^\s*'$TAG'\s*$/d' -e '/-----BEGIN/,/-----END/d'
}

format_date()
{
    LC_ALL=C date --date="$1" '+%a %b %d %Y'
}

changelog_lines()
{
    local tagdate tagauthor tagemail tagbody
    eval $(git for-each-ref --shell --format='
tagdate=%(taggerdate:short)
tagauthor=%(taggername)
tagemail=%(taggeremail)' "refs/tags/$TAG")
    tagbody="$(git for-each-ref --format='%(contents)' "refs/tags/$TAG" | trim_contents | dash_bullets)"
    tagdate="$(format_date $tagdate)"

    printf "* %s %s %s - %s-1\n%s\n\n" "$tagdate" "$tagauthor" "$tagemail" "$TAG" "$tagbody"
}

commit_lines()
{
    local body
    body="$(git for-each-ref --format='%(contents)' "refs/tags/$TAG" | trim_contents)"
    printf "Update to version %s\n\n%s" "$TAG" "$body"
}

readlink_or()
{
    if ! readlink "$1"; then
        echo "$1"
    fi
}

check()
{
   "$(dirname $0)/check-git-rw" pkgs.fedoraproject.org "$PACKAGE.git"
    fedora-cert -v -u prevent-prompt
}

prepare()
{
    local spec tmpfile srpm tarball ret already

    WORKDIR="koji-$BRANCH"
    already=0

    trace "Checking out koji package $PACKAGE"

    rm -rf $WORKDIR
    git clone ssh://pkgs.fedoraproject.org/$PACKAGE.git $WORKDIR

    git -C $WORKDIR checkout "$BRANCH"

    # Update the spec file
    spec="$WORKDIR/$PACKAGE.spec"

    tarball=$(readlink_or $TARBALL)
    cp $tarball $WORKDIR/

    if grep -q "$TAG-1" "$spec"; then
        trace "Already have NVR $PACKAGE-$TAG-1 present"
        already=1

    else
        trace "Updating spec file"

        tmpfile=$(mktemp .koji-changelog.XXXXXX)
        printf "%%changelog\n" >> $tmpfile
        changelog_lines >> $tmpfile
        sed '1,/%changelog/d' "$spec" >> $tmpfile

        sed -e "1s/^/%define tag $TAG\n%define rev 1\n/" \
            -e "/%changelog/r $tmpfile" \
            -e "/%changelog/,\$d" \
            $SPEC > "$spec"

        CLEANUP="$CLEANUP $tmpfile"
        trace "Updating sources"

        SOURCES=$(basename $tarball)
        (cd $WORKDIR && md5sum $SOURCES) > $WORKDIR/sources
        echo "/$SOURCES" >> $WORKDIR/.gitignore

        trace "Committing changes"

        # Commit all of that
        git -C $WORKDIR add cockpit.spec sources .gitignore
        commit_lines | git -C $WORKDIR commit -F -
    fi

    trace "Building SRPM"

    # Make an SRPM out of that
    cd $WORKDIR
    srpm=$(fedpkg srpm | sed -n 's/Wrote: \(.\+\.src\.rpm\)$/\1/p')

    if [ $already -eq 0 ]; then
        trace "Making a scratch build"

        # Build it in brew
        if ! fedpkg scratch-build --srpm=$srpm; then
            if [ $CONTINUE -eq 0 ]; then
                exit 1
            else
                already=1
            fi
        fi
    fi

    # Link it into place
    cd ..
    if [ -n "$SRPM" ]; then
        ln -snf $srpm $SRPM
    fi

    if [ $already -eq 1 ]; then
        if [ "$CLEANUP" != "" ]; then
            rm $CLEANUP
        fi
        exit 0
    fi
}

commit()
(
    if [ "$CLEANUP" != "" ]; then
        rm $CLEANUP
    fi

    cd $WORKDIR

    git checkout $BRANCH

    fedpkg new-sources $SOURCES
    git reset --hard HEAD  # Undo any silliness above

    # Push the changes
    git push origin $BRANCH
    fedpkg build
)

while getopts "f:kp:s:t:qvxz" opt; do
    case "$opt" in
    f)
        TARBALL="$OPTARG"
        ;;
    k)
        CONTINUE=1
        ;;
    p)
        PACKAGE="$OPTARG"
        ;;
    s)
        SPEC="$OPTARG"
        ;;
    t)
        TAG="$OPTARG"
        ;;
    q)
        QUIET=1
        VERBOSE=0
        ;;
    v)
        QUIET=0
        VERBOSE=1
        ;;
    x)
        TRANSACTION=1
        ;;
    z)
        CHECK=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $# -ne 1 ]; then
    usage
fi

if [ $CHECK -eq 1 ]; then
    check
    exit 0
fi

BRANCH="$1"

# The tag for the release
if [ -z "$TAG" ]; then
    TAG=$(git describe --abbrev=0)
    if [ -z "$TAG" ]; then
        message "could not find a tag to release"
        exit 2
    fi
fi

if [ -z "$PACKAGE" ]; then
    message "no package specified"
    exit 2
fi

if [ -z "$SPEC" ]; then
    message "no spec source file specified"
    exit 2
elif [ ! -f "$SPEC" ]; then
    message "spec source file not found: $SPEC"
    exit 1
fi

if [ -z "$TARBALL" ]; then
    message "no tarball input specified"
    exit 2
elif [ ! -f "$TARBALL" ]; then
    message "tarball source not found: $TARBALL"
    exit 1
fi

prepare

if [ $TRANSACTION -eq 1 ]; then
    kill -STOP $$
fi

commit
